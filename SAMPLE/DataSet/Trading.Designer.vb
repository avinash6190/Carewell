'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3053
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("Trading"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class Trading
    Inherits Global.System.Data.DataSet
    
    Private tableTrading As TradingDataTable
    
    Private tableCompanydetails As CompanydetailsDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Trading")) Is Nothing) Then
                MyBase.Tables.Add(New TradingDataTable(ds.Tables("Trading")))
            End If
            If (Not (ds.Tables("Companydetails")) Is Nothing) Then
                MyBase.Tables.Add(New CompanydetailsDataTable(ds.Tables("Companydetails")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property _Trading() As TradingDataTable
        Get
            Return Me.tableTrading
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Companydetails() As CompanydetailsDataTable
        Get
            Return Me.tableCompanydetails
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As Trading = CType(MyBase.Clone,Trading)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Trading")) Is Nothing) Then
                MyBase.Tables.Add(New TradingDataTable(ds.Tables("Trading")))
            End If
            If (Not (ds.Tables("Companydetails")) Is Nothing) Then
                MyBase.Tables.Add(New CompanydetailsDataTable(ds.Tables("Companydetails")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableTrading = CType(MyBase.Tables("Trading"),TradingDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTrading) Is Nothing) Then
                Me.tableTrading.InitVars
            End If
        End If
        Me.tableCompanydetails = CType(MyBase.Tables("Companydetails"),CompanydetailsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCompanydetails) Is Nothing) Then
                Me.tableCompanydetails.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "Trading"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Trading.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableTrading = New TradingDataTable
        MyBase.Tables.Add(Me.tableTrading)
        Me.tableCompanydetails = New CompanydetailsDataTable
        MyBase.Tables.Add(Me.tableCompanydetails)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerialize_Trading() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCompanydetails() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As Trading = New Trading
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub TradingRowChangeEventHandler(ByVal sender As Object, ByVal e As TradingRowChangeEvent)
    
    Public Delegate Sub CompanydetailsRowChangeEventHandler(ByVal sender As Object, ByVal e As CompanydetailsRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TradingDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnOpeningStock As Global.System.Data.DataColumn
        
        Private columnClosingStock As Global.System.Data.DataColumn
        
        Private columnBySales As Global.System.Data.DataColumn
        
        Private columnPurchase As Global.System.Data.DataColumn
        
        Private columnWages As Global.System.Data.DataColumn
        
        Private columnFuel As Global.System.Data.DataColumn
        
        Private columnOctroi As Global.System.Data.DataColumn
        
        Private columnOthers As Global.System.Data.DataColumn
        
        Private columnPurchaseAdjust As Global.System.Data.DataColumn
        
        Private columnSalesAdjust As Global.System.Data.DataColumn
        
        Private columnSalary As Global.System.Data.DataColumn
        
        Private columnRent As Global.System.Data.DataColumn
        
        Private columnStationaries As Global.System.Data.DataColumn
        
        Private columnPostageExpense As Global.System.Data.DataColumn
        
        Private columnInsurance As Global.System.Data.DataColumn
        
        Private columnCommision As Global.System.Data.DataColumn
        
        Private columnCarriageOutwards As Global.System.Data.DataColumn
        
        Private columnIntrestPaid As Global.System.Data.DataColumn
        
        Private columnRentReceived As Global.System.Data.DataColumn
        
        Private columnInterestReceived As Global.System.Data.DataColumn
        
        Private columnDisCount As Global.System.Data.DataColumn
        
        Private columnCommisionEarned As Global.System.Data.DataColumn
        
        Private columnInsuranceEarned As Global.System.Data.DataColumn
        
        Private columnElectricity As Global.System.Data.DataColumn
        
        Private columnTelephone As Global.System.Data.DataColumn
        
        Private columnLoanPaid As Global.System.Data.DataColumn
        
        Private columnODPaid As Global.System.Data.DataColumn
        
        Private columnPrePaid As Global.System.Data.DataColumn
        
        Private columnEcommision As Global.System.Data.DataColumn
        
        Private columnSuspance As Global.System.Data.DataColumn
        
        Private columnWithdraw As Global.System.Data.DataColumn
        
        Private columnDeposit As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Trading"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OpeningStockColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOpeningStock
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClosingStockColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClosingStock
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BySalesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBySales
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PurchaseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPurchase
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WagesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWages
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FuelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFuel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OctroiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOctroi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OthersColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOthers
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PurchaseAdjustColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPurchaseAdjust
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SalesAdjustColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSalesAdjust
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SalaryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSalary
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StationariesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStationaries
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PostageExpenseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPostageExpense
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InsuranceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInsurance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CommisionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCommision
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CarriageOutwardsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCarriageOutwards
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IntrestPaidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIntrestPaid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RentReceivedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRentReceived
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InterestReceivedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInterestReceived
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DisCountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDisCount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CommisionEarnedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCommisionEarned
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InsuranceEarnedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInsuranceEarned
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ElectricityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnElectricity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelephoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelephone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LoanPaidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLoanPaid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ODPaidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnODPaid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrePaidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrePaid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EcommisionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEcommision
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SuspanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSuspance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WithdrawColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWithdraw
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepositColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeposit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TradingRow
            Get
                Return CType(Me.Rows(index),TradingRow)
            End Get
        End Property
        
        Public Event TradingRowChanging As TradingRowChangeEventHandler
        
        Public Event TradingRowChanged As TradingRowChangeEventHandler
        
        Public Event TradingRowDeleting As TradingRowChangeEventHandler
        
        Public Event TradingRowDeleted As TradingRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTradingRow(ByVal row As TradingRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTradingRow( _
                    ByVal OpeningStock As Decimal,  _
                    ByVal ClosingStock As Decimal,  _
                    ByVal BySales As Decimal,  _
                    ByVal Purchase As Decimal,  _
                    ByVal Wages As Decimal,  _
                    ByVal Fuel As Decimal,  _
                    ByVal Octroi As Decimal,  _
                    ByVal Others As Decimal,  _
                    ByVal PurchaseAdjust As Decimal,  _
                    ByVal SalesAdjust As Decimal,  _
                    ByVal Salary As Decimal,  _
                    ByVal Rent As Decimal,  _
                    ByVal Stationaries As Decimal,  _
                    ByVal PostageExpense As Decimal,  _
                    ByVal Insurance As Decimal,  _
                    ByVal Commision As Decimal,  _
                    ByVal CarriageOutwards As Decimal,  _
                    ByVal IntrestPaid As Decimal,  _
                    ByVal RentReceived As Decimal,  _
                    ByVal InterestReceived As Decimal,  _
                    ByVal DisCount As Decimal,  _
                    ByVal CommisionEarned As Decimal,  _
                    ByVal InsuranceEarned As Decimal,  _
                    ByVal Electricity As Decimal,  _
                    ByVal Telephone As Decimal,  _
                    ByVal LoanPaid As Decimal,  _
                    ByVal ODPaid As Decimal,  _
                    ByVal PrePaid As Decimal,  _
                    ByVal Ecommision As Decimal,  _
                    ByVal Suspance As Decimal,  _
                    ByVal Withdraw As Decimal,  _
                    ByVal Deposit As Decimal) As TradingRow
            Dim rowTradingRow As TradingRow = CType(Me.NewRow,TradingRow)
            Dim columnValuesArray() As Object = New Object() {OpeningStock, ClosingStock, BySales, Purchase, Wages, Fuel, Octroi, Others, PurchaseAdjust, SalesAdjust, Salary, Rent, Stationaries, PostageExpense, Insurance, Commision, CarriageOutwards, IntrestPaid, RentReceived, InterestReceived, DisCount, CommisionEarned, InsuranceEarned, Electricity, Telephone, LoanPaid, ODPaid, PrePaid, Ecommision, Suspance, Withdraw, Deposit}
            rowTradingRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTradingRow)
            Return rowTradingRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TradingDataTable = CType(MyBase.Clone,TradingDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TradingDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnOpeningStock = MyBase.Columns("OpeningStock")
            Me.columnClosingStock = MyBase.Columns("ClosingStock")
            Me.columnBySales = MyBase.Columns("BySales")
            Me.columnPurchase = MyBase.Columns("Purchase")
            Me.columnWages = MyBase.Columns("Wages")
            Me.columnFuel = MyBase.Columns("Fuel")
            Me.columnOctroi = MyBase.Columns("Octroi")
            Me.columnOthers = MyBase.Columns("Others")
            Me.columnPurchaseAdjust = MyBase.Columns("PurchaseAdjust")
            Me.columnSalesAdjust = MyBase.Columns("SalesAdjust")
            Me.columnSalary = MyBase.Columns("Salary")
            Me.columnRent = MyBase.Columns("Rent")
            Me.columnStationaries = MyBase.Columns("Stationaries")
            Me.columnPostageExpense = MyBase.Columns("PostageExpense")
            Me.columnInsurance = MyBase.Columns("Insurance")
            Me.columnCommision = MyBase.Columns("Commision")
            Me.columnCarriageOutwards = MyBase.Columns("CarriageOutwards")
            Me.columnIntrestPaid = MyBase.Columns("IntrestPaid")
            Me.columnRentReceived = MyBase.Columns("RentReceived")
            Me.columnInterestReceived = MyBase.Columns("InterestReceived")
            Me.columnDisCount = MyBase.Columns("DisCount")
            Me.columnCommisionEarned = MyBase.Columns("CommisionEarned")
            Me.columnInsuranceEarned = MyBase.Columns("InsuranceEarned")
            Me.columnElectricity = MyBase.Columns("Electricity")
            Me.columnTelephone = MyBase.Columns("Telephone")
            Me.columnLoanPaid = MyBase.Columns("LoanPaid")
            Me.columnODPaid = MyBase.Columns("ODPaid")
            Me.columnPrePaid = MyBase.Columns("PrePaid")
            Me.columnEcommision = MyBase.Columns("Ecommision")
            Me.columnSuspance = MyBase.Columns("Suspance")
            Me.columnWithdraw = MyBase.Columns("Withdraw")
            Me.columnDeposit = MyBase.Columns("Deposit")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnOpeningStock = New Global.System.Data.DataColumn("OpeningStock", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOpeningStock)
            Me.columnClosingStock = New Global.System.Data.DataColumn("ClosingStock", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClosingStock)
            Me.columnBySales = New Global.System.Data.DataColumn("BySales", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBySales)
            Me.columnPurchase = New Global.System.Data.DataColumn("Purchase", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPurchase)
            Me.columnWages = New Global.System.Data.DataColumn("Wages", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWages)
            Me.columnFuel = New Global.System.Data.DataColumn("Fuel", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFuel)
            Me.columnOctroi = New Global.System.Data.DataColumn("Octroi", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOctroi)
            Me.columnOthers = New Global.System.Data.DataColumn("Others", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOthers)
            Me.columnPurchaseAdjust = New Global.System.Data.DataColumn("PurchaseAdjust", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPurchaseAdjust)
            Me.columnSalesAdjust = New Global.System.Data.DataColumn("SalesAdjust", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSalesAdjust)
            Me.columnSalary = New Global.System.Data.DataColumn("Salary", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSalary)
            Me.columnRent = New Global.System.Data.DataColumn("Rent", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRent)
            Me.columnStationaries = New Global.System.Data.DataColumn("Stationaries", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStationaries)
            Me.columnPostageExpense = New Global.System.Data.DataColumn("PostageExpense", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPostageExpense)
            Me.columnInsurance = New Global.System.Data.DataColumn("Insurance", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInsurance)
            Me.columnCommision = New Global.System.Data.DataColumn("Commision", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCommision)
            Me.columnCarriageOutwards = New Global.System.Data.DataColumn("CarriageOutwards", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCarriageOutwards)
            Me.columnIntrestPaid = New Global.System.Data.DataColumn("IntrestPaid", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIntrestPaid)
            Me.columnRentReceived = New Global.System.Data.DataColumn("RentReceived", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRentReceived)
            Me.columnInterestReceived = New Global.System.Data.DataColumn("InterestReceived", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInterestReceived)
            Me.columnDisCount = New Global.System.Data.DataColumn("DisCount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDisCount)
            Me.columnCommisionEarned = New Global.System.Data.DataColumn("CommisionEarned", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCommisionEarned)
            Me.columnInsuranceEarned = New Global.System.Data.DataColumn("InsuranceEarned", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInsuranceEarned)
            Me.columnElectricity = New Global.System.Data.DataColumn("Electricity", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnElectricity)
            Me.columnTelephone = New Global.System.Data.DataColumn("Telephone", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelephone)
            Me.columnLoanPaid = New Global.System.Data.DataColumn("LoanPaid", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLoanPaid)
            Me.columnODPaid = New Global.System.Data.DataColumn("ODPaid", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnODPaid)
            Me.columnPrePaid = New Global.System.Data.DataColumn("PrePaid", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrePaid)
            Me.columnEcommision = New Global.System.Data.DataColumn("Ecommision", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEcommision)
            Me.columnSuspance = New Global.System.Data.DataColumn("Suspance", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSuspance)
            Me.columnWithdraw = New Global.System.Data.DataColumn("Withdraw", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWithdraw)
            Me.columnDeposit = New Global.System.Data.DataColumn("Deposit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeposit)
            Me.ExtendedProperties.Add("Generator_TablePropName", "_Trading")
            Me.ExtendedProperties.Add("Generator_UserTableName", "Trading")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTradingRow() As TradingRow
            Return CType(Me.NewRow,TradingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TradingRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TradingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TradingRowChangedEvent) Is Nothing) Then
                RaiseEvent TradingRowChanged(Me, New TradingRowChangeEvent(CType(e.Row,TradingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TradingRowChangingEvent) Is Nothing) Then
                RaiseEvent TradingRowChanging(Me, New TradingRowChangeEvent(CType(e.Row,TradingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TradingRowDeletedEvent) Is Nothing) Then
                RaiseEvent TradingRowDeleted(Me, New TradingRowChangeEvent(CType(e.Row,TradingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TradingRowDeletingEvent) Is Nothing) Then
                RaiseEvent TradingRowDeleting(Me, New TradingRowChangeEvent(CType(e.Row,TradingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTradingRow(ByVal row As TradingRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Trading = New Trading
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TradingDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CompanydetailsDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnorganizationname As Global.System.Data.DataColumn
        
        Private columnaddress1 As Global.System.Data.DataColumn
        
        Private columnphoneno As Global.System.Data.DataColumn
        
        Private columnmobileno1 As Global.System.Data.DataColumn
        
        Private columnemail As Global.System.Data.DataColumn
        
        Private columntinno As Global.System.Data.DataColumn
        
        Private columncstno As Global.System.Data.DataColumn
        
        Private columnDrugLicenceNo As Global.System.Data.DataColumn
        
        Private columnauthorised As Global.System.Data.DataColumn
        
        Private columnsam2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Companydetails"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property organizationnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnorganizationname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property address1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnaddress1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property phonenoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnphoneno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property mobileno1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmobileno1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property emailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnemail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tinnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntinno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cstnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncstno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DrugLicenceNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDrugLicenceNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property authorisedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnauthorised
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sam2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnsam2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CompanydetailsRow
            Get
                Return CType(Me.Rows(index),CompanydetailsRow)
            End Get
        End Property
        
        Public Event CompanydetailsRowChanging As CompanydetailsRowChangeEventHandler
        
        Public Event CompanydetailsRowChanged As CompanydetailsRowChangeEventHandler
        
        Public Event CompanydetailsRowDeleting As CompanydetailsRowChangeEventHandler
        
        Public Event CompanydetailsRowDeleted As CompanydetailsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCompanydetailsRow(ByVal row As CompanydetailsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCompanydetailsRow(ByVal organizationname As String, ByVal address1 As String, ByVal phoneno As String, ByVal mobileno1 As String, ByVal email As String, ByVal tinno As String, ByVal cstno As String, ByVal DrugLicenceNo As String, ByVal authorised As String, ByVal sam2 As String) As CompanydetailsRow
            Dim rowCompanydetailsRow As CompanydetailsRow = CType(Me.NewRow,CompanydetailsRow)
            Dim columnValuesArray() As Object = New Object() {organizationname, address1, phoneno, mobileno1, email, tinno, cstno, DrugLicenceNo, authorised, sam2}
            rowCompanydetailsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCompanydetailsRow)
            Return rowCompanydetailsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CompanydetailsDataTable = CType(MyBase.Clone,CompanydetailsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CompanydetailsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnorganizationname = MyBase.Columns("organizationname")
            Me.columnaddress1 = MyBase.Columns("address1")
            Me.columnphoneno = MyBase.Columns("phoneno")
            Me.columnmobileno1 = MyBase.Columns("mobileno1")
            Me.columnemail = MyBase.Columns("email")
            Me.columntinno = MyBase.Columns("tinno")
            Me.columncstno = MyBase.Columns("cstno")
            Me.columnDrugLicenceNo = MyBase.Columns("DrugLicenceNo")
            Me.columnauthorised = MyBase.Columns("authorised")
            Me.columnsam2 = MyBase.Columns("sam2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnorganizationname = New Global.System.Data.DataColumn("organizationname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnorganizationname)
            Me.columnaddress1 = New Global.System.Data.DataColumn("address1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaddress1)
            Me.columnphoneno = New Global.System.Data.DataColumn("phoneno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnphoneno)
            Me.columnmobileno1 = New Global.System.Data.DataColumn("mobileno1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmobileno1)
            Me.columnemail = New Global.System.Data.DataColumn("email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnemail)
            Me.columntinno = New Global.System.Data.DataColumn("tinno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntinno)
            Me.columncstno = New Global.System.Data.DataColumn("cstno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncstno)
            Me.columnDrugLicenceNo = New Global.System.Data.DataColumn("DrugLicenceNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDrugLicenceNo)
            Me.columnauthorised = New Global.System.Data.DataColumn("authorised", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnauthorised)
            Me.columnsam2 = New Global.System.Data.DataColumn("sam2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsam2)
            Me.columnemail.Caption = "mobileno2"
            Me.columnauthorised.Caption = "sam1"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCompanydetailsRow() As CompanydetailsRow
            Return CType(Me.NewRow,CompanydetailsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CompanydetailsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CompanydetailsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CompanydetailsRowChangedEvent) Is Nothing) Then
                RaiseEvent CompanydetailsRowChanged(Me, New CompanydetailsRowChangeEvent(CType(e.Row,CompanydetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CompanydetailsRowChangingEvent) Is Nothing) Then
                RaiseEvent CompanydetailsRowChanging(Me, New CompanydetailsRowChangeEvent(CType(e.Row,CompanydetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CompanydetailsRowDeletedEvent) Is Nothing) Then
                RaiseEvent CompanydetailsRowDeleted(Me, New CompanydetailsRowChangeEvent(CType(e.Row,CompanydetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CompanydetailsRowDeletingEvent) Is Nothing) Then
                RaiseEvent CompanydetailsRowDeleting(Me, New CompanydetailsRowChangeEvent(CType(e.Row,CompanydetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCompanydetailsRow(ByVal row As CompanydetailsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Trading = New Trading
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CompanydetailsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TradingRow
        Inherits Global.System.Data.DataRow
        
        Private tableTrading As TradingDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTrading = CType(Me.Table,TradingDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OpeningStock() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTrading.OpeningStockColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OpeningStock' in table 'Trading' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTrading.OpeningStockColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClosingStock() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTrading.ClosingStockColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClosingStock' in table 'Trading' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTrading.ClosingStockColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BySales() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTrading.BySalesColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BySales' in table 'Trading' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTrading.BySalesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Purchase() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTrading.PurchaseColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Purchase' in table 'Trading' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTrading.PurchaseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Wages() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTrading.WagesColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Wages' in table 'Trading' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTrading.WagesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fuel() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTrading.FuelColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fuel' in table 'Trading' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTrading.FuelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Octroi() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTrading.OctroiColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Octroi' in table 'Trading' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTrading.OctroiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Others() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTrading.OthersColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Others' in table 'Trading' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTrading.OthersColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PurchaseAdjust() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTrading.PurchaseAdjustColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PurchaseAdjust' in table 'Trading' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTrading.PurchaseAdjustColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SalesAdjust() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTrading.SalesAdjustColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SalesAdjust' in table 'Trading' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTrading.SalesAdjustColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Salary() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTrading.SalaryColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Salary' in table 'Trading' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTrading.SalaryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Rent() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTrading.RentColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Rent' in table 'Trading' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTrading.RentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Stationaries() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTrading.StationariesColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Stationaries' in table 'Trading' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTrading.StationariesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PostageExpense() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTrading.PostageExpenseColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PostageExpense' in table 'Trading' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTrading.PostageExpenseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Insurance() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTrading.InsuranceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Insurance' in table 'Trading' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTrading.InsuranceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Commision() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTrading.CommisionColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Commision' in table 'Trading' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTrading.CommisionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CarriageOutwards() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTrading.CarriageOutwardsColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CarriageOutwards' in table 'Trading' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTrading.CarriageOutwardsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IntrestPaid() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTrading.IntrestPaidColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IntrestPaid' in table 'Trading' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTrading.IntrestPaidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RentReceived() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTrading.RentReceivedColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RentReceived' in table 'Trading' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTrading.RentReceivedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InterestReceived() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTrading.InterestReceivedColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InterestReceived' in table 'Trading' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTrading.InterestReceivedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DisCount() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTrading.DisCountColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DisCount' in table 'Trading' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTrading.DisCountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CommisionEarned() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTrading.CommisionEarnedColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CommisionEarned' in table 'Trading' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTrading.CommisionEarnedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InsuranceEarned() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTrading.InsuranceEarnedColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InsuranceEarned' in table 'Trading' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTrading.InsuranceEarnedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Electricity() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTrading.ElectricityColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Electricity' in table 'Trading' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTrading.ElectricityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Telephone() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTrading.TelephoneColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Telephone' in table 'Trading' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTrading.TelephoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LoanPaid() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTrading.LoanPaidColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LoanPaid' in table 'Trading' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTrading.LoanPaidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ODPaid() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTrading.ODPaidColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ODPaid' in table 'Trading' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTrading.ODPaidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrePaid() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTrading.PrePaidColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrePaid' in table 'Trading' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTrading.PrePaidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ecommision() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTrading.EcommisionColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ecommision' in table 'Trading' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTrading.EcommisionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Suspance() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTrading.SuspanceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Suspance' in table 'Trading' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTrading.SuspanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Withdraw() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTrading.WithdrawColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Withdraw' in table 'Trading' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTrading.WithdrawColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Deposit() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTrading.DepositColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Deposit' in table 'Trading' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTrading.DepositColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOpeningStockNull() As Boolean
            Return Me.IsNull(Me.tableTrading.OpeningStockColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOpeningStockNull()
            Me(Me.tableTrading.OpeningStockColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClosingStockNull() As Boolean
            Return Me.IsNull(Me.tableTrading.ClosingStockColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClosingStockNull()
            Me(Me.tableTrading.ClosingStockColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBySalesNull() As Boolean
            Return Me.IsNull(Me.tableTrading.BySalesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBySalesNull()
            Me(Me.tableTrading.BySalesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPurchaseNull() As Boolean
            Return Me.IsNull(Me.tableTrading.PurchaseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPurchaseNull()
            Me(Me.tableTrading.PurchaseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWagesNull() As Boolean
            Return Me.IsNull(Me.tableTrading.WagesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWagesNull()
            Me(Me.tableTrading.WagesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFuelNull() As Boolean
            Return Me.IsNull(Me.tableTrading.FuelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFuelNull()
            Me(Me.tableTrading.FuelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOctroiNull() As Boolean
            Return Me.IsNull(Me.tableTrading.OctroiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOctroiNull()
            Me(Me.tableTrading.OctroiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOthersNull() As Boolean
            Return Me.IsNull(Me.tableTrading.OthersColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOthersNull()
            Me(Me.tableTrading.OthersColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPurchaseAdjustNull() As Boolean
            Return Me.IsNull(Me.tableTrading.PurchaseAdjustColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPurchaseAdjustNull()
            Me(Me.tableTrading.PurchaseAdjustColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSalesAdjustNull() As Boolean
            Return Me.IsNull(Me.tableTrading.SalesAdjustColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSalesAdjustNull()
            Me(Me.tableTrading.SalesAdjustColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSalaryNull() As Boolean
            Return Me.IsNull(Me.tableTrading.SalaryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSalaryNull()
            Me(Me.tableTrading.SalaryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRentNull() As Boolean
            Return Me.IsNull(Me.tableTrading.RentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRentNull()
            Me(Me.tableTrading.RentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStationariesNull() As Boolean
            Return Me.IsNull(Me.tableTrading.StationariesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStationariesNull()
            Me(Me.tableTrading.StationariesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPostageExpenseNull() As Boolean
            Return Me.IsNull(Me.tableTrading.PostageExpenseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPostageExpenseNull()
            Me(Me.tableTrading.PostageExpenseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInsuranceNull() As Boolean
            Return Me.IsNull(Me.tableTrading.InsuranceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInsuranceNull()
            Me(Me.tableTrading.InsuranceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommisionNull() As Boolean
            Return Me.IsNull(Me.tableTrading.CommisionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommisionNull()
            Me(Me.tableTrading.CommisionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCarriageOutwardsNull() As Boolean
            Return Me.IsNull(Me.tableTrading.CarriageOutwardsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCarriageOutwardsNull()
            Me(Me.tableTrading.CarriageOutwardsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIntrestPaidNull() As Boolean
            Return Me.IsNull(Me.tableTrading.IntrestPaidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIntrestPaidNull()
            Me(Me.tableTrading.IntrestPaidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRentReceivedNull() As Boolean
            Return Me.IsNull(Me.tableTrading.RentReceivedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRentReceivedNull()
            Me(Me.tableTrading.RentReceivedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInterestReceivedNull() As Boolean
            Return Me.IsNull(Me.tableTrading.InterestReceivedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInterestReceivedNull()
            Me(Me.tableTrading.InterestReceivedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDisCountNull() As Boolean
            Return Me.IsNull(Me.tableTrading.DisCountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDisCountNull()
            Me(Me.tableTrading.DisCountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommisionEarnedNull() As Boolean
            Return Me.IsNull(Me.tableTrading.CommisionEarnedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommisionEarnedNull()
            Me(Me.tableTrading.CommisionEarnedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInsuranceEarnedNull() As Boolean
            Return Me.IsNull(Me.tableTrading.InsuranceEarnedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInsuranceEarnedNull()
            Me(Me.tableTrading.InsuranceEarnedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsElectricityNull() As Boolean
            Return Me.IsNull(Me.tableTrading.ElectricityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetElectricityNull()
            Me(Me.tableTrading.ElectricityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelephoneNull() As Boolean
            Return Me.IsNull(Me.tableTrading.TelephoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelephoneNull()
            Me(Me.tableTrading.TelephoneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLoanPaidNull() As Boolean
            Return Me.IsNull(Me.tableTrading.LoanPaidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLoanPaidNull()
            Me(Me.tableTrading.LoanPaidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsODPaidNull() As Boolean
            Return Me.IsNull(Me.tableTrading.ODPaidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetODPaidNull()
            Me(Me.tableTrading.ODPaidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrePaidNull() As Boolean
            Return Me.IsNull(Me.tableTrading.PrePaidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrePaidNull()
            Me(Me.tableTrading.PrePaidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEcommisionNull() As Boolean
            Return Me.IsNull(Me.tableTrading.EcommisionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEcommisionNull()
            Me(Me.tableTrading.EcommisionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSuspanceNull() As Boolean
            Return Me.IsNull(Me.tableTrading.SuspanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSuspanceNull()
            Me(Me.tableTrading.SuspanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWithdrawNull() As Boolean
            Return Me.IsNull(Me.tableTrading.WithdrawColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWithdrawNull()
            Me(Me.tableTrading.WithdrawColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepositNull() As Boolean
            Return Me.IsNull(Me.tableTrading.DepositColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepositNull()
            Me(Me.tableTrading.DepositColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CompanydetailsRow
        Inherits Global.System.Data.DataRow
        
        Private tableCompanydetails As CompanydetailsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCompanydetails = CType(Me.Table,CompanydetailsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property organizationname() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanydetails.organizationnameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'organizationname' in table 'Companydetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanydetails.organizationnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property address1() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanydetails.address1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'address1' in table 'Companydetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanydetails.address1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property phoneno() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanydetails.phonenoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'phoneno' in table 'Companydetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanydetails.phonenoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property mobileno1() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanydetails.mobileno1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'mobileno1' in table 'Companydetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanydetails.mobileno1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property email() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanydetails.emailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'email' in table 'Companydetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanydetails.emailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tinno() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanydetails.tinnoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tinno' in table 'Companydetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanydetails.tinnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cstno() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanydetails.cstnoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cstno' in table 'Companydetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanydetails.cstnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DrugLicenceNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanydetails.DrugLicenceNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DrugLicenceNo' in table 'Companydetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanydetails.DrugLicenceNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property authorised() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanydetails.authorisedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'authorised' in table 'Companydetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanydetails.authorisedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sam2() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompanydetails.sam2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sam2' in table 'Companydetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompanydetails.sam2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsorganizationnameNull() As Boolean
            Return Me.IsNull(Me.tableCompanydetails.organizationnameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetorganizationnameNull()
            Me(Me.tableCompanydetails.organizationnameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isaddress1Null() As Boolean
            Return Me.IsNull(Me.tableCompanydetails.address1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setaddress1Null()
            Me(Me.tableCompanydetails.address1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsphonenoNull() As Boolean
            Return Me.IsNull(Me.tableCompanydetails.phonenoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetphonenoNull()
            Me(Me.tableCompanydetails.phonenoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ismobileno1Null() As Boolean
            Return Me.IsNull(Me.tableCompanydetails.mobileno1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setmobileno1Null()
            Me(Me.tableCompanydetails.mobileno1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsemailNull() As Boolean
            Return Me.IsNull(Me.tableCompanydetails.emailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetemailNull()
            Me(Me.tableCompanydetails.emailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstinnoNull() As Boolean
            Return Me.IsNull(Me.tableCompanydetails.tinnoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettinnoNull()
            Me(Me.tableCompanydetails.tinnoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscstnoNull() As Boolean
            Return Me.IsNull(Me.tableCompanydetails.cstnoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcstnoNull()
            Me(Me.tableCompanydetails.cstnoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDrugLicenceNoNull() As Boolean
            Return Me.IsNull(Me.tableCompanydetails.DrugLicenceNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDrugLicenceNoNull()
            Me(Me.tableCompanydetails.DrugLicenceNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsauthorisedNull() As Boolean
            Return Me.IsNull(Me.tableCompanydetails.authorisedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetauthorisedNull()
            Me(Me.tableCompanydetails.authorisedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issam2Null() As Boolean
            Return Me.IsNull(Me.tableCompanydetails.sam2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsam2Null()
            Me(Me.tableCompanydetails.sam2Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TradingRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TradingRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TradingRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TradingRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CompanydetailsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CompanydetailsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CompanydetailsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CompanydetailsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
